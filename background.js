// match pattern for the URLs to redirect
var pattern = "*://www.fluxfm.de/stream/player.js*";
debugger;
// redirect function
// returns an object with a property `redirectURL`
// set to the new URL
function redirect(requestDetails) {
    console.log("Redirecting: " + requestDetails.url);
   // debugger;
    return {
        //redirectUrl: 'data:text/html' +encodeURIComponent(jsPlayer)
        redirectUrl: datatext
    };
}

// add the listener,
// passing the filter argument and "blocking"
chrome.webRequest.onBeforeRequest.addListener(
    redirect,
    {urls:[pattern]},
    ["blocking"]
);

let datatext = 'data:text/javascript;base64,';




